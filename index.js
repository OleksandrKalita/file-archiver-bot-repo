if (process.env.NODE_ENV !== 'production') {
    require('dotenv').config();
}

const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');

const app = express();
const PORT = process.env.PORT || 3000;

// ======================================
// –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –ë–û–¢–ê –ó POLLING
// ======================================
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { 
    polling: {
        interval: 300,      // –Ü–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è (–º—Å)
        autoStart: true,    // –ê–≤—Ç–æ—Å—Ç–∞—Ä—Ç
        params: {
            timeout: 10     // –¢–∞–π–º–∞—É—Ç long polling (—Å–µ–∫)
        }
    }
});

// URL –¥–ª—è n8n webhooks
const N8N_WEBHOOK_URL = process.env.N8N_WEBHOOK_URL;
const N8N_WEBHOOK_GET_ACCESS_URL = process.env.N8N_WEBHOOK_GET_ACCESS_URL;
const N8N_WEBHOOK_GET_FILE_STRUCTURE = process.env.N8N_WEBHOOK_GET_FILE_STRUCTURE;
const N8N_WEBHOOK_GET_FILE_MENU = process.env.N8N_WEBHOOK_GET_FILE_MENU;

console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!');
console.log('üì° Polling –∞–∫—Ç–∏–≤–Ω–∏–π:', bot.isPolling());

// ======================================
// –í–ò–î–ê–õ–ï–ù–ù–Ø WEBHOOK (–ö–†–ò–¢–ò–ß–ù–û!)
// ======================================
bot.deleteWebHook({ drop_pending_updates: true }).then((result) => {
    console.log('‚úÖ Webhook –≤–∏–¥–∞–ª–µ–Ω–æ:', result);
}).catch(err => {
    console.error('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è webhook:', err.message);
});

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É webhook —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥–∏
setTimeout(async () => {
    try {
        const info = await bot.getWebHookInfo();
        console.log('üìä Webhook Info:', JSON.stringify(info, null, 2));
        
        if (info.url) {
            console.log('‚ö†Ô∏è –£–í–ê–ì–ê! Webhook –∞–∫—Ç–∏–≤–Ω–∏–π:', info.url);
            console.log('üîÑ –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ...');
            await bot.deleteWebHook({ drop_pending_updates: true });
        } else {
            console.log('‚úÖ Webhook –≤—ñ–¥—Å—É—Ç–Ω—ñ–π - polling –ø—Ä–∞—Ü—é—î');
        }
    } catch (err) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ webhook:', err.message);
    }
}, 2000);

// ======================================
// –û–ë–†–û–ë–ö–ê –ü–û–ú–ò–õ–û–ö POLLING
// ======================================
bot.on('polling_error', (error) => {
    console.error('‚ùå Polling error:', error.code, error.message);
    
    // –Ø–∫—â–æ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç –∑ webhook - –≤–∏–¥–∞–ª—è—î–º–æ –π–æ–≥–æ
    if (error.code === 'ETELEGRAM' && error.message.includes('409')) {
        console.log('üîÑ –ö–æ–Ω—Ñ–ª—ñ–∫—Ç webhook –≤–∏—è–≤–ª–µ–Ω–æ! –í–∏–¥–∞–ª—è—î–º–æ...');
        bot.deleteWebHook({ drop_pending_updates: true }).then(() => {
            console.log('‚úÖ Webhook –≤–∏–¥–∞–ª–µ–Ω–æ –ø—ñ—Å–ª—è –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É');
        });
    }
});

// ======================================
// –ö–û–ú–ê–ù–î–ê /start
// ======================================
bot.onText(/\/start/, async (msg) => {
    console.log('‚ñ∂Ô∏è /start –≤—ñ–¥:', msg.from.first_name, msg.from.id);
    
    const chatId = msg.chat.id;
    
    try {
        // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤ n8n (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
        if (N8N_WEBHOOK_GET_ACCESS_URL) {
            const response = await axios.post(N8N_WEBHOOK_GET_ACCESS_URL, {
                message: msg
            });
            console.log('‚úÖ –î–∞–Ω—ñ /start –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ n8n:', response.status);
        }
        
        // –í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        bot.sendMessage(chatId, 
            'üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Ñ–∞–π–ª–∞–º–∏.\n\n' +
            '–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥–∏:\n' +
            '/menu - –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n' +
            '/help - –î–æ–ø–æ–º–æ–≥–∞'
        );
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ /start:', error.message);
        bot.sendMessage(chatId, '‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏');
    }
});

// ======================================
// –ö–û–ú–ê–ù–î–ê /menu
// ======================================
bot.onText(/\/menu/, (msg) => {
    console.log('üìã /menu –≤—ñ–¥:', msg.from.first_name);
    
    const chatId = msg.chat.id;
    
    bot.sendMessage(chatId, 'üìÅ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:', {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: 'üìÅ –ü–∞–ø–∫–∞ 1', callback_data: 'menu_cmd_folder_1' },
                    { text: 'üìÅ –ü–∞–ø–∫–∞ 2', callback_data: 'menu_cmd_folder_2' }
                ],
                [
                    { text: 'üìÑ –§–∞–π–ª 1', callback_data: 'menu_cmd_file_1' }
                ],
                [
                    { text: '‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è', callback_data: 'menu_cmd_settings' },
                    { text: '‚ùå –ó–∞–∫—Ä–∏—Ç–∏', callback_data: 'menu_cmd_close' }
                ]
            ]
        }
    });
});

// ======================================
// –¢–ï–ö–°–¢ "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª üì®"
// ======================================
bot.onText(/–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª/, (msg) => {
    console.log('üì® "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª" –≤—ñ–¥:', msg.from.first_name);
    
    const chatId = msg.chat.id;
    
    bot.sendMessage(chatId, '–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:', {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: 'üìÅ –ü–∞–ø–∫–∞ 1', callback_data: 'menu_cmd_folder_1' },
                    { text: 'üìÅ –ü–∞–ø–∫–∞ 2', callback_data: 'menu_cmd_folder_2' }
                ],
                [
                    { text: 'üìÑ –§–∞–π–ª 1', callback_data: 'menu_cmd_file_1' }
                ],
                [
                    { text: '‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è', callback_data: 'menu_cmd_settings' },
                    { text: '‚ùå –ó–∞–∫—Ä–∏—Ç–∏', callback_data: 'menu_cmd_close' }
                ]
            ]
        }
    });
});

// ======================================
// –û–ë–†–û–ë–ö–ê CALLBACK_QUERY (–ö–ù–û–ü–ö–ò)
// ======================================
bot.on('callback_query', async (query) => {
    console.log('=================================');
    console.log('üîî CALLBACK_QUERY');
    console.log('ID:', query.id);
    console.log('Data:', query.data);
    console.log('User:', query.from.first_name, query.from.id);
    console.log('=================================');
    
    const data = query.data;
    const chatId = query.message.chat.id;
    const messageId = query.message.message_id;
    
    try {
        // ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–û: –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ callback (–ø—Ä–∏–±–∏—Ä–∞—î "–∑–∞–≥—Ä—É–∑–∫–∞")
        await bot.answerCallbackQuery(query.id);
        console.log('‚úÖ answerCallbackQuery –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ');
        
        // –û–±—Ä–æ–±–∫–∞ —Ä—ñ–∑–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫
        if (data === 'menu_cmd_folder_1') {
            console.log('‚Üí –ü–∞–ø–∫–∞ 1');
            bot.sendMessage(chatId, 'üìÅ –í–∏ –æ–±—Ä–∞–ª–∏ –ü–∞–ø–∫—É 1\n\n–¢—É—Ç –±—É–¥—É—Ç—å —Ñ–∞–π–ª–∏...');
            
            // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤ n8n (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
            if (N8N_WEBHOOK_GET_FILE_MENU) {
                await axios.post(N8N_WEBHOOK_GET_FILE_MENU, {
                    action: 'folder_1',
                    user: query.from
                });
            }
        }
        else if (data === 'menu_cmd_folder_2') {
            console.log('‚Üí –ü–∞–ø–∫–∞ 2');
            bot.sendMessage(chatId, 'üìÅ –í–∏ –æ–±—Ä–∞–ª–∏ –ü–∞–ø–∫—É 2\n\n–¢—É—Ç –±—É–¥—É—Ç—å —Ñ–∞–π–ª–∏...');
            
            if (N8N_WEBHOOK_GET_FILE_MENU) {
                await axios.post(N8N_WEBHOOK_GET_FILE_MENU, {
                    action: 'folder_2',
                    user: query.from
                });
            }
        }
        else if (data === 'menu_cmd_file_1') {
            console.log('‚Üí –§–∞–π–ª 1');
            bot.sendMessage(chatId, 'üìÑ –í–∏ –æ–±—Ä–∞–ª–∏ –§–∞–π–ª 1\n\nüì• –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é...');
        }
        else if (data === 'menu_cmd_settings') {
            console.log('‚Üí –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è');
            
            // –†–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –Ω–æ–≤–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
            bot.editMessageText('‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:', {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: 'üîî –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è', callback_data: 'settings_notifications' }
                        ],
                        [
                            { text: 'üåê –ú–æ–≤–∞', callback_data: 'settings_language' }
                        ],
                        [
                            { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }
                        ]
                    ]
                }
            });
        }
        else if (data === 'menu_cmd_close') {
            console.log('‚Üí –ó–∞–∫—Ä–∏—Ç–∏ –º–µ–Ω—é');
            bot.deleteMessage(chatId, messageId);
            bot.sendMessage(chatId, '‚úÖ –ú–µ–Ω—é –∑–∞–∫—Ä–∏—Ç–æ');
        }
        else if (data === 'back_to_main') {
            console.log('‚Üí –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é');
            
            bot.editMessageText('üìÅ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:', {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: 'üìÅ –ü–∞–ø–∫–∞ 1', callback_data: 'menu_cmd_folder_1' },
                            { text: 'üìÅ –ü–∞–ø–∫–∞ 2', callback_data: 'menu_cmd_folder_2' }
                        ],
                        [
                            { text: 'üìÑ –§–∞–π–ª 1', callback_data: 'menu_cmd_file_1' }
                        ],
                        [
                            { text: '‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è', callback_data: 'menu_cmd_settings' },
                            { text: '‚ùå –ó–∞–∫—Ä–∏—Ç–∏', callback_data: 'menu_cmd_close' }
                        ]
                    ]
                }
            });
        }
        else {
            console.log('‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞ callback:', data);
            bot.sendMessage(chatId, '‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞');
        }
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ callback_query:', error.message);
        bot.sendMessage(chatId, '‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏');
    }
});

// ======================================
// –û–ë–†–û–ë–ö–ê –ó–í–ò–ß–ê–ô–ù–ò–• –¢–ï–ö–°–¢–û–í–ò–• –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨
// ======================================
bot.on('text', async (msg) => {
    const text = msg.text;
    const chatId = msg.chat.id;
    
    // –Ü–≥–Ω–æ—Ä—É—î–º–æ –∫–æ–º–∞–Ω–¥–∏ (–≤–æ–Ω–∏ –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è –æ–∫—Ä–µ–º–æ)
    if (text.startsWith('/')) return;
    
    // –Ü–≥–Ω–æ—Ä—É—î–º–æ "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª" (–æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –æ–∫—Ä–µ–º–æ)
    if (text.includes('–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª')) return;
    
    console.log('üì© –¢–µ–∫—Å—Ç –≤—ñ–¥', msg.from.first_name + ':', text);
    
    // –ú–æ–∂–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤ n8n –¥–ª—è –æ–±—Ä–æ–±–∫–∏
    if (N8N_WEBHOOK_URL) {
        try {
            await axios.post(N8N_WEBHOOK_URL, {
                message: msg
            });
            console.log('‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ n8n');
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ n8n:', error.message);
        }
    }
    
    // –í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    bot.sendMessage(chatId, `–í–∏ –Ω–∞–ø–∏—Å–∞–ª–∏: "${text}"\n\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /menu –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –º–µ–Ω—é`);
});

// ======================================
// –û–ë–†–û–ë–ö–ê –§–û–¢–û
// ======================================
bot.on('photo', async (msg) => {
    console.log('üì∏ –§–æ—Ç–æ –≤—ñ–¥:', msg.from.first_name);
    
    const chatId = msg.chat.id;
    
    bot.sendMessage(chatId, 'üì∏ –§–æ—Ç–æ –æ—Ç—Ä–∏–º–∞–Ω–æ!\n\nüì§ –û–±—Ä–æ–±–ª—è—é...');
    
    // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤ n8n —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    if (N8N_WEBHOOK_URL) {
        try {
            await axios.post(N8N_WEBHOOK_URL, {
                type: 'photo',
                message: msg
            });
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ n8n:', error.message);
        }
    }
});

// ======================================
// –û–ë–†–û–ë–ö–ê –î–û–ö–£–ú–ï–ù–¢–Ü–í
// ======================================
bot.on('document', async (msg) => {
    console.log('üìÑ –î–æ–∫—É–º–µ–Ω—Ç –≤—ñ–¥:', msg.from.first_name);
    
    const chatId = msg.chat.id;
    const fileName = msg.document.file_name;
    
    bot.sendMessage(chatId, `üìÑ –î–æ–∫—É–º–µ–Ω—Ç "${fileName}" –æ—Ç—Ä–∏–º–∞–Ω–æ!\n\nüì§ –û–±—Ä–æ–±–ª—è—é...`);
    
    // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤ n8n —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    if (N8N_WEBHOOK_URL) {
        try {
            await axios.post(N8N_WEBHOOK_URL, {
                type: 'document',
                message: msg
            });
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ n8n:', error.message);
        }
    }
});

// ======================================
// HTTP –°–ï–†–í–ï–† –î–õ–Ø RAILWAY
// ======================================
app.get('/', (req, res) => {
    res.send(`
        <h1>ü§ñ Telegram Bot is running!</h1>
        <p>Polling: ${bot.isPolling()}</p>
        <p>Time: ${new Date().toISOString()}</p>
    `);
});

app.get('/health', (req, res) => {
    res.json({
        status: 'ok',
        polling: bot.isPolling(),
        timestamp: new Date().toISOString()
    });
});

app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

// ======================================
// GRACEFUL SHUTDOWN
// ======================================
process.on('SIGINT', () => {
    console.log('üõë –ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞...');
    bot.stopPolling();
    process.exit(0);
});

process.on('SIGTERM', () => {
    console.log('üõë –ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞...');
    bot.stopPolling();
    process.exit(0);
});